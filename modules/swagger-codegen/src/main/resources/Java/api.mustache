{{>licenseInfo}}
package {{package}};

import com.sun.jersey.api.client.GenericType;
import com.google.gson.reflect.TypeToken;

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.Configuration;
import {{modelPackage}}.*;
import {{invokerPackage}}.Pair;

{{#imports}}import {{import}};
{{/imports}}

import java.io.InputStream;

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}

import com.squareup.okhttp.RequestBody;
import com.squareup.okhttp.MediaType;
import okio.BufferedSink;
import com.squareup.okhttp.MultipartBuilder;

{{>generatedAnnotation}}
{{#operations}}
public class {{classname}} {
  private ApiClient {{localVariablePrefix}}apiClient;

  public {{classname}}() {
    this(Configuration.getDefaultApiClient());
  }

  public {{classname}}(ApiClient apiClient) {
    this.{{localVariablePrefix}}apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return {{localVariablePrefix}}apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.{{localVariablePrefix}}apiClient = apiClient;
  }

  private byte[] convertInputStreamToByteArray(InputStream input) throws ApiException {
    try {
      java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();
      int nRead;
      byte[] data = new byte[8192];
      while ((nRead = input.read(data, 0, data.length)) != -1) {
        buffer.write(data, 0, nRead);
      }
      return buffer.toByteArray();
    } catch (java.io.IOException e) {
      throw new ApiException(e);
    }
  }

  {{#operation}}
  /**
   * {{summary}}
   * {{notes}}
   {{#allParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
   {{/allParams}}
   {{#returnType}}
   * @return {{returnType}}
   {{/returnType}}
   * @throws ApiException if fails to make API call
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) throws ApiException {
    Object {{localVariablePrefix}}localVarPostBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    {{#allParams}}{{#required}}
    // verify the required parameter '{{paramName}}' is set
    if ({{paramName}} == null) {
      throw new ApiException(400, "Missing the required parameter '{{paramName}}' when calling {{operationId}}");
    }
    {{/required}}{{/allParams}}
    // create path and map variables
    String {{localVariablePrefix}}localVarPath = "{{{path}}}"{{#pathParams}}
      .replaceAll("\\{" + "{{baseName}}" + "\\}", {{localVariablePrefix}}apiClient.escapeString({{{paramName}}}.toString())){{/pathParams}};

    // query params
    {{javaUtilPrefix}}List<Pair> {{localVariablePrefix}}localVarQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
    {{javaUtilPrefix}}List<Pair> {{localVariablePrefix}}localVarCollectionQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
    {{javaUtilPrefix}}Map<String, String> {{localVariablePrefix}}localVarHeaderParams = new {{javaUtilPrefix}}HashMap<String, String>();
    {{javaUtilPrefix}}Map<String, Object> {{localVariablePrefix}}localVarFormParams = new {{javaUtilPrefix}}HashMap<String, Object>();

    {{#queryParams}}
    {{localVariablePrefix}}{{#collectionFormat}}localVarCollectionQueryParams.addAll({{localVariablePrefix}}apiClient.parameterToPairs("{{{collectionFormat}}}", {{/collectionFormat}}{{^collectionFormat}}localVarQueryParams.addAll({{localVariablePrefix}}apiClient.parameterToPair({{/collectionFormat}}"{{baseName}}", {{paramName}}));
    {{/queryParams}}

    {{#headerParams}}if ({{paramName}} != null)
      {{localVariablePrefix}}localVarHeaderParams.put("{{baseName}}", {{localVariablePrefix}}apiClient.parameterToString({{paramName}}));
    {{/headerParams}}

    {{#formParams}}if ({{paramName}} != null)
      {{localVariablePrefix}}localVarFormParams.put("{{baseName}}", {{paramName}});
    {{/formParams}}

    final String[] {{localVariablePrefix}}localVarAccepts = {
      {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}}
    };
    final String {{localVariablePrefix}}localVarAccept = {{localVariablePrefix}}apiClient.selectHeaderAccept({{localVariablePrefix}}localVarAccepts);

    final String[] {{localVariablePrefix}}localVarContentTypes = {
      {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}
    };
    final String {{localVariablePrefix}}localVarContentType = {{localVariablePrefix}}apiClient.selectHeaderContentType({{localVariablePrefix}}localVarContentTypes);

    String[] {{localVariablePrefix}}localVarAuthNames = new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} };

    {{#returnType}}
    GenericType<{{returnType}}> {{localVariablePrefix}}localVarReturnType = new GenericType<{{returnType}}>() {};
    return {{localVariablePrefix}}apiClient.invokeAPI({{localVariablePrefix}}localVarPath, "{{httpMethod}}", {{localVariablePrefix}}localVarQueryParams, {{localVariablePrefix}}localVarCollectionQueryParams, {{localVariablePrefix}}localVarPostBody, {{localVariablePrefix}}localVarHeaderParams, {{localVariablePrefix}}localVarFormParams, {{localVariablePrefix}}localVarAccept, {{localVariablePrefix}}localVarContentType, {{localVariablePrefix}}localVarAuthNames, {{localVariablePrefix}}localVarReturnType, null);
    {{/returnType}}{{^returnType}}
    {{localVariablePrefix}}apiClient.invokeAPI({{localVariablePrefix}}localVarPath, "{{httpMethod}}", {{localVariablePrefix}}localVarQueryParams, {{localVariablePrefix}}localVarCollectionQueryParams, {{localVariablePrefix}}localVarPostBody, {{localVariablePrefix}}localVarHeaderParams, {{localVariablePrefix}}localVarFormParams, {{localVariablePrefix}}localVarAccept, {{localVariablePrefix}}localVarContentType, {{localVariablePrefix}}localVarAuthNames, null, null);
    {{/returnType}}
  }

  public com.squareup.okhttp.Call {{operationId}}Call(... ) {
      // create path and map variables
      String path = "{{{path}}}";

      // query params
      List<Pair> queryParams = new ArrayList<Pair>();
      List<Pair> collectionQueryParams = new ArrayList<Pair>();
      Map<String, String> headerParams = new HashMap<String, String>();
      Map<String, Object> formParams = new HashMap<String, Object>();

      return {{localVariablePrefix}}apiClient.buildCall(path, "{{httpMethod}}", queryParams, collectionQueryParams,
        null, headerParams, formParams, new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} }, null);
  }

  {{#allParams}}
  {{#isFile}}
  /**
   * Overload for file parameter as InputStream.
   */
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}(InputStream {{paramName}}) throws ApiException {
    try {
        // Read the inputstream into a byte array
        byte[] fileBytes = convertInputStreamToByteArray({{paramName}});
        
        // Create the multipart form manually
        MultipartBuilder multipartBuilder = new MultipartBuilder()
            .type(MultipartBuilder.FORM);
        
        // Add the file as a part with proper Content-Disposition header
        MediaType mediaType = MediaType.parse("application/octet-stream");
        RequestBody fileBody = RequestBody.create(mediaType, fileBytes);
        multipartBuilder.addFormDataPart("inputFile", "filename", fileBody);
        
        RequestBody requestBody = multipartBuilder.build();
        
        // Create path and map variables
        String {{localVariablePrefix}}localVarPath = "{{{path}}}";
        
        // Call the API and return the result with the properly formatted multipart body
        {{#returnType}}
        Type {{localVariablePrefix}}localVarReturnType = new TypeToken<{{returnType}}>() {}.getType();
        ApiResponse<{{returnType}}> response = apiClient.execute(
            apiClient.buildCall(
                {{localVariablePrefix}}localVarPath,
                "POST", // Always use POST
                new ArrayList<Pair>(),
                new ArrayList<Pair>(),
                requestBody,
                new HashMap<String, String>(), // Let the system handle content-type headers
                new HashMap<String, Object>(),
                new String[] { "Apikey" },
                null
            ),
            {{localVariablePrefix}}localVarReturnType
        );
        return response.getData();
        {{/returnType}}{{^returnType}}
        apiClient.execute(
            apiClient.buildCall(
                {{localVariablePrefix}}localVarPath,
                "POST", // Always use POST
                new ArrayList<Pair>(),
                new ArrayList<Pair>(),
                requestBody,
                new HashMap<String, String>(), // Let the system handle content-type headers
                new HashMap<String, Object>(),
                new String[] { "Apikey" },
                null
            )
        );
        {{/returnType}}
    } catch (IOException e) {
        throw new ApiException(e);
    }
  }

  /**
   * Chunked transfer method for file parameter as InputStream.
   */
  public {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{operationId}}ChunkedTransfer(final InputStream {{paramName}}) throws ApiException {
    // Reuse the regular method as we've improved it
    return {{operationId}}({{paramName}});
  }
  {{/isFile}}
  {{/allParams}}
  {{/operation}}
}
{{/operations}}
