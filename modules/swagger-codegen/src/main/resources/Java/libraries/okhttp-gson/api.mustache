--- a/c:\swagger-codegen\modules\swagger-codegen\src\main\resources\Java\libraries\okhttp-gson\api.mustache
+++ b/c:\swagger-codegen\modules\swagger-codegen\src\main\resources\Java\libraries\okhttp-gson\api.mustache
@@ -1,6 +1,7 @@
 {{>licenseInfo}}
 
 package {{package}};
+
 
 import {{invokerPackage}}.ApiCallback;
 import {{invokerPackage}}.ApiClient;
@@ -20,6 +21,7 @@
 {{/jakarta}}
 {{/useBeanValidation}}
 {{#performBeanValidation}}
+
 {{#jakarta}}
 import jakarta.validation.ConstraintViolation;
 import jakarta.validation.Validation;
@@ -35,6 +37,7 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 {{/performBeanValidation}}
+import java.io.InputStream;
 
 {{#imports}}import {{import}};
 {{/imports}}
@@ -101,6 +104,14 @@
         String {{localVariablePrefix}}localVarPath = "{{{path}}}"{{#pathParams}}
             .replaceAll("\\{" + "{{baseName}}" + "\\}", {{localVariablePrefix}}apiClient.escapeString({{{paramName}}}.toString())){{/pathParams}};
 
+        {{#allParams}}
+        {{#isFile}}
+        if ({{paramName}} instanceof java.io.File) {
+            {{localVariablePrefix}}localVarPostBody = {{paramName}};
+        } else if ({{paramName}} instanceof java.io.InputStream) {
+            {{localVariablePrefix}}localVarPostBody = new ProgressRequestBody((InputStream) {{paramName}}, progressListener);
+        }
+        {{/isFile}}
+        {{/allParams}}
         {{javaUtilPrefix}}List<Pair> {{localVariablePrefix}}localVarQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();
         {{javaUtilPrefix}}List<Pair> {{localVariablePrefix}}localVarCollectionQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();{{#queryParams}}
         if ({{paramName}} != null)
@@ -112,8 +123,12 @@
         {{localVariablePrefix}}localVarHeaderParams.put("{{baseName}}", {{localVariablePrefix}}apiClient.parameterToString({{paramName}}));{{/headerParams}}
 
         {{javaUtilPrefix}}Map<String, Object> {{localVariablePrefix}}localVarFormParams = new {{javaUtilPrefix}}HashMap<String, Object>();{{#formParams}}
-        if ({{paramName}} != null)
-        {{localVariablePrefix}}localVarFormParams.put("{{baseName}}", {{paramName}});{{/formParams}}
+        if ({{paramName}} != null) {
+            {{#isFile}}
+            {{localVariablePrefix}}localVarFormParams.put("{{baseName}}", {{paramName}});
+            {{/isFile}}
+            {{^isFile}}{{localVariablePrefix}}localVarFormParams.put("{{baseName}}", {{paramName}});{{/isFile}}
+        }{{/formParams}}
 
         final String[] {{localVariablePrefix}}localVarAccepts = {
             {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}}
@@ -162,6 +177,13 @@
         // verify the required parameter '{{paramName}}' is set
         if ({{paramName}} == null) {
             throw new ApiException("Missing the required parameter '{{paramName}}' when calling {{operationId}}(Async)");
+        }
+        {{#isFile}}
+        if (!({{paramName}} instanceof java.io.File || {{paramName}} instanceof java.io.InputStream)) {
+            throw new ApiException("Parameter '{{paramName}}' must be a File or InputStream when calling {{operationId}}(Async)");
+        }
+        if ({{paramName}} instanceof java.io.File && !((java.io.File) {{paramName}}).exists()) {
+            throw new ApiException("File '{{paramName}}' does not exist when calling {{operationId}}(Async)");
         }
         {{/required}}{{/allParams}}
 
@@ -212,6 +234,48 @@
     @Deprecated
     {{/isDeprecated}}
     public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) throws ApiException {
+        {{#allParams}}
+        {{#isFile}}
+        if ({{paramName}} instanceof java.io.File) {
+            {{operationId}}((java.io.File) {{paramName}});
+        } else if ({{paramName}} instanceof java.io.InputStream) {
+            {{operationId}}((java.io.InputStream) {{paramName}});
+        } else {
+            throw new ApiException("Parameter '{{paramName}}' must be a File or InputStream when calling {{operationId}}");
+        }
+        {{/isFile}}
+        {{/allParams}}
+        {{^allParams}}
+        {{operationId}}();
+        {{/allParams}}
+        {{^isFile}}
+        {{#allParams}}
+        {{#hasMore}}
+        {{/hasMore}}
+        {{/allParams}}
+        {{#returnType}}ApiResponse<{{{returnType}}}> {{localVariablePrefix}}resp = {{/returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});{{#returnType}}
+        return {{localVariablePrefix}}resp.getData();{{/returnType}}
+        {{/isFile}}
+    }
+
+    {{#allParams}}
+    {{#isFile}}
+    /**
+     * {{summary}}
+     * {{notes}}
+     * @param {{paramName}} {{description}} (required)
+     * @return {{returnType}}
+     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
+     */
+    public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{dataType}} {{paramName}}) throws ApiException {
+        {{#returnType}}ApiResponse<{{{returnType}}}> {{localVariablePrefix}}resp = {{/returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});{{#returnType}}
+        return {{localVariablePrefix}}resp.getData();{{/returnType}}
+    }
+    {{/isFile}}
+    {{/allParams}}
+
+    public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}() throws ApiException {
+
         {{#returnType}}ApiResponse<{{{returnType}}}> {{localVariablePrefix}}resp = {{/returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});{{#returnType}}
         return {{localVariablePrefix}}resp.getData();{{/returnType}}
     }

